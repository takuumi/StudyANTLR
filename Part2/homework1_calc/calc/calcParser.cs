//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/takuumi/Projects/StudyANTLR/Part2/homework1_calc/calc/calc.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class calcParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DISITS=1, PLUS=2;
	public const int
		RULE_input = 0;
	public static readonly string[] ruleNames = {
		"input"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'+'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DISITS", "PLUS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "calc.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static calcParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public calcParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public calcParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
	 
		public InputContext() { }
		public virtual void CopyFrom(InputContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Calc_addContext : InputContext {
		public IToken lhs;
		public IToken rhs;
		public ITerminalNode PLUS() { return GetToken(calcParser.PLUS, 0); }
		public ITerminalNode Eof() { return GetToken(calcParser.Eof, 0); }
		public ITerminalNode[] DISITS() { return GetTokens(calcParser.DISITS); }
		public ITerminalNode DISITS(int i) {
			return GetToken(calcParser.DISITS, i);
		}
		public Calc_addContext(InputContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcVisitor<TResult> typedVisitor = visitor as IcalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalc_add(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		try {
			_localctx = new Calc_addContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 2; ((Calc_addContext)_localctx).lhs = Match(DISITS);
			State = 3; Match(PLUS);
			State = 4; ((Calc_addContext)_localctx).rhs = Match(DISITS);
			State = 5; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x4', '\n', '\x4', '\x2', '\t', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '\x2', '\x2', '\x2', '\x2', '\b', '\x2', '\x4', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x5', '\a', '\x3', '\x2', '\x2', '\x5', '\x6', 
		'\a', '\x4', '\x2', '\x2', '\x6', '\a', '\a', '\x3', '\x2', '\x2', '\a', 
		'\b', '\a', '\x2', '\x2', '\x3', '\b', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
