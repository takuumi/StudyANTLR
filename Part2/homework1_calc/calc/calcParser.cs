//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/takuumi/Projects/StudyANTLR/Part2/homework1_calc/calc/calc.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class calcParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PLUS=1, MINUS=2, ASTERISK=3, SLASH=4, OPEN_PAREN=5, CLOSE_PAREN=6, COMMA=7, 
		UINT=8, REAL=9, WS=10, IDENTIFIER=11;
	public const int
		RULE_input = 0, RULE_expr = 1, RULE_num = 2;
	public static readonly string[] ruleNames = {
		"input", "expr", "num"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'('", "')'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PLUS", "MINUS", "ASTERISK", "SLASH", "OPEN_PAREN", "CLOSE_PAREN", 
		"COMMA", "UINT", "REAL", "WS", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "calc.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static calcParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public calcParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public calcParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(calcParser.Eof, 0); }
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcVisitor<TResult> typedVisitor = visitor as IcalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6; expr(0);
			State = 7; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expr_additiveContext : ExprContext {
		public ExprContext lhs;
		public IToken op;
		public ExprContext rhs;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(calcParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(calcParser.MINUS, 0); }
		public Expr_additiveContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcVisitor<TResult> typedVisitor = visitor as IcalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_additive(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_funccallContext : ExprContext {
		public IToken funcname;
		public ExprContext _expr;
		public IList<ExprContext> _args = new List<ExprContext>();
		public ITerminalNode OPEN_PAREN() { return GetToken(calcParser.OPEN_PAREN, 0); }
		public ITerminalNode CLOSE_PAREN() { return GetToken(calcParser.CLOSE_PAREN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(calcParser.IDENTIFIER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Expr_funccallContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcVisitor<TResult> typedVisitor = visitor as IcalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_funccall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_multipricativeContext : ExprContext {
		public ExprContext lhs;
		public IToken op;
		public ExprContext rhs;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode ASTERISK() { return GetToken(calcParser.ASTERISK, 0); }
		public ITerminalNode SLASH() { return GetToken(calcParser.SLASH, 0); }
		public Expr_multipricativeContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcVisitor<TResult> typedVisitor = visitor as IcalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_multipricative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_noneContext : ExprContext {
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public Expr_noneContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcVisitor<TResult> typedVisitor = visitor as IcalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_none(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UINT:
			case REAL:
				{
				_localctx = new Expr_noneContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 10; num();
				}
				break;
			case IDENTIFIER:
				{
				_localctx = new Expr_funccallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 11; ((Expr_funccallContext)_localctx).funcname = Match(IDENTIFIER);
				State = 12; Match(OPEN_PAREN);
				State = 13; ((Expr_funccallContext)_localctx)._expr = expr(0);
				((Expr_funccallContext)_localctx)._args.Add(((Expr_funccallContext)_localctx)._expr);
				State = 14; Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 26;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 24;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new Expr_additiveContext(new ExprContext(_parentctx, _parentState));
						((Expr_additiveContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 18;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 19;
						((Expr_additiveContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((Expr_additiveContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 20; ((Expr_additiveContext)_localctx).rhs = expr(4);
						}
						break;
					case 2:
						{
						_localctx = new Expr_multipricativeContext(new ExprContext(_parentctx, _parentState));
						((Expr_multipricativeContext)_localctx).lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 21;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 22;
						((Expr_multipricativeContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ASTERISK || _la==SLASH) ) {
							((Expr_multipricativeContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 23; ((Expr_multipricativeContext)_localctx).rhs = expr(3);
						}
						break;
					}
					} 
				}
				State = 28;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		public ITerminalNode UINT() { return GetToken(calcParser.UINT, 0); }
		public ITerminalNode REAL() { return GetToken(calcParser.REAL, 0); }
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcalcVisitor<TResult> typedVisitor = visitor as IcalcVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(Context, State);
		EnterRule(_localctx, 4, RULE_num);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			_la = TokenStream.LA(1);
			if ( !(_la==UINT || _la==REAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\r', '\"', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x13', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '\x1B', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\x1E', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x2', 
		'\x3', '\x4', '\x5', '\x2', '\x4', '\x6', '\x2', '\x5', '\x3', '\x2', 
		'\x3', '\x4', '\x3', '\x2', '\x5', '\x6', '\x3', '\x2', '\n', '\v', '\x2', 
		'!', '\x2', '\b', '\x3', '\x2', '\x2', '\x2', '\x4', '\x12', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x1F', '\x3', '\x2', '\x2', '\x2', '\b', '\t', '\x5', 
		'\x4', '\x3', '\x2', '\t', '\n', '\a', '\x2', '\x2', '\x3', '\n', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\v', '\f', '\b', '\x3', '\x1', '\x2', '\f', 
		'\x13', '\x5', '\x6', '\x4', '\x2', '\r', '\xE', '\a', '\r', '\x2', '\x2', 
		'\xE', '\xF', '\a', '\a', '\x2', '\x2', '\xF', '\x10', '\x5', '\x4', '\x3', 
		'\x2', '\x10', '\x11', '\a', '\b', '\x2', '\x2', '\x11', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\v', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x13', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x15', '\f', '\x5', '\x2', '\x2', '\x15', '\x16', '\t', 
		'\x2', '\x2', '\x2', '\x16', '\x1B', '\x5', '\x4', '\x3', '\x6', '\x17', 
		'\x18', '\f', '\x4', '\x2', '\x2', '\x18', '\x19', '\t', '\x3', '\x2', 
		'\x2', '\x19', '\x1B', '\x5', '\x4', '\x3', '\x5', '\x1A', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		' ', '\t', '\x4', '\x2', '\x2', ' ', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x5', '\x12', '\x1A', '\x1C',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
