//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/takuumi/Projects/StudyANTLR/Part2/homework2_plcsim/plcsim/plcsim.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class plcsimParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		EQUAL=1, AND=2, HAT=3, PLUS=4, MINUS=5, MUL_OR_INDIRECT=6, SLASH=7, GT=8, 
		LT=9, VBAR=10, TILDA=11, COLON=12, ATMARK=13, UNDEFINE=14, DOTINT=15, 
		OLDINDIRECT=16, EOL=17, SEPARATOR=18, LINECOMMENT=19, CONST_DEC_NUMBER=20, 
		CONST_HEX_NUMBER=21, CONST_FLOAT=22, CONST_STRING=23, SUFFIX=24, IDENTIFIER=25;
	public const int
		RULE_input = 0, RULE_oneline = 1, RULE_mnemonic = 2, RULE_instruction = 3, 
		RULE_separator = 4, RULE_linecomment = 5, RULE_operator = 6, RULE_operand = 7, 
		RULE_index = 8, RULE_wordbit = 9, RULE_indirect = 10, RULE_local = 11, 
		RULE_literal = 12, RULE_const_number = 13, RULE_const_string = 14, RULE_const_dec_number = 15, 
		RULE_const_hex_number = 16, RULE_const_float = 17;
	public static readonly string[] ruleNames = {
		"input", "oneline", "mnemonic", "instruction", "separator", "linecomment", 
		"operator", "operand", "index", "wordbit", "indirect", "local", "literal", 
		"const_number", "const_string", "const_dec_number", "const_hex_number", 
		"const_float"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", "'&'", "'^'", "'+'", "'-'", "'*'", "'/'", "'>'", "'<'", "'|'", 
		"'~'", "':'", "'@'", "'???'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "EQUAL", "AND", "HAT", "PLUS", "MINUS", "MUL_OR_INDIRECT", "SLASH", 
		"GT", "LT", "VBAR", "TILDA", "COLON", "ATMARK", "UNDEFINE", "DOTINT", 
		"OLDINDIRECT", "EOL", "SEPARATOR", "LINECOMMENT", "CONST_DEC_NUMBER", 
		"CONST_HEX_NUMBER", "CONST_FLOAT", "CONST_STRING", "SUFFIX", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "plcsim.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static plcsimParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public plcsimParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public plcsimParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		public OnelineContext[] oneline() {
			return GetRuleContexts<OnelineContext>();
		}
		public OnelineContext oneline(int i) {
			return GetRuleContext<OnelineContext>(i);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IplcsimVisitor<TResult> typedVisitor = visitor as IplcsimVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SEPARATOR) | (1L << LINECOMMENT) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 36; oneline();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnelineContext : ParserRuleContext {
		public OnelineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneline; } }
	 
		public OnelineContext() { }
		public virtual void CopyFrom(OnelineContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Plcsim_memonicContext : OnelineContext {
		public MnemonicContext mnemonic() {
			return GetRuleContext<MnemonicContext>(0);
		}
		public Plcsim_memonicContext(OnelineContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IplcsimVisitor<TResult> typedVisitor = visitor as IplcsimVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlcsim_memonic(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Plcsim_linecommentContext : OnelineContext {
		public LinecommentContext linecomment() {
			return GetRuleContext<LinecommentContext>(0);
		}
		public Plcsim_linecommentContext(OnelineContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IplcsimVisitor<TResult> typedVisitor = visitor as IplcsimVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlcsim_linecomment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnelineContext oneline() {
		OnelineContext _localctx = new OnelineContext(Context, State);
		EnterRule(_localctx, 2, RULE_oneline);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SEPARATOR:
			case IDENTIFIER:
				_localctx = new Plcsim_memonicContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 42; mnemonic();
				}
				break;
			case LINECOMMENT:
				_localctx = new Plcsim_linecommentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 43; linecomment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MnemonicContext : ParserRuleContext {
		public MnemonicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mnemonic; } }
	 
		public MnemonicContext() { }
		public virtual void CopyFrom(MnemonicContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Plcsim_mainContext : MnemonicContext {
		public OperandContext _operand;
		public IList<OperandContext> _ope = new List<OperandContext>();
		public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(plcsimParser.Eof, 0); }
		public SeparatorContext[] separator() {
			return GetRuleContexts<SeparatorContext>();
		}
		public SeparatorContext separator(int i) {
			return GetRuleContext<SeparatorContext>(i);
		}
		public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		public ITerminalNode[] EOL() { return GetTokens(plcsimParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(plcsimParser.EOL, i);
		}
		public Plcsim_mainContext(MnemonicContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IplcsimVisitor<TResult> typedVisitor = visitor as IplcsimVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlcsim_main(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MnemonicContext mnemonic() {
		MnemonicContext _localctx = new MnemonicContext(Context, State);
		EnterRule(_localctx, 4, RULE_mnemonic);
		int _la;
		try {
			int _alt;
			_localctx = new Plcsim_mainContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEPARATOR) {
				{
				{
				State = 46; separator();
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 52; instruction();
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEPARATOR) {
				{
				{
				State = 53; separator();
				State = 54; ((Plcsim_mainContext)_localctx)._operand = operand(0);
				((Plcsim_mainContext)_localctx)._ope.Add(((Plcsim_mainContext)_localctx)._operand);
				State = 58;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 55; separator();
						}
						} 
					}
					State = 60;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 72;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EOL:
				{
				State = 67;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 66; Match(EOL);
					}
					}
					State = 69;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EOL );
				}
				break;
			case Eof:
				{
				State = 71; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public IToken inst;
		public IToken suffix;
		public OperatorContext opr;
		public IToken suf;
		public ITerminalNode IDENTIFIER() { return GetToken(plcsimParser.IDENTIFIER, 0); }
		public ITerminalNode SUFFIX() { return GetToken(plcsimParser.SUFFIX, 0); }
		public OperatorContext[] @operator() {
			return GetRuleContexts<OperatorContext>();
		}
		public OperatorContext @operator(int i) {
			return GetRuleContext<OperatorContext>(i);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IplcsimVisitor<TResult> typedVisitor = visitor as IplcsimVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 6, RULE_instruction);
		int _la;
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74; _localctx.inst = Match(IDENTIFIER);
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUFFIX) {
					{
					State = 75; _localctx.suffix = Match(SUFFIX);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78; _localctx.inst = Match(IDENTIFIER);
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 79; _localctx.opr = @operator();
					}
					}
					State = 82;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << AND) | (1L << HAT) | (1L << PLUS) | (1L << MINUS) | (1L << MUL_OR_INDIRECT) | (1L << SLASH) | (1L << GT) | (1L << LT) | (1L << VBAR) | (1L << TILDA))) != 0) );
				State = 85;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUFFIX) {
					{
					State = 84; _localctx.suf = Match(SUFFIX);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeparatorContext : ParserRuleContext {
		public ITerminalNode[] SEPARATOR() { return GetTokens(plcsimParser.SEPARATOR); }
		public ITerminalNode SEPARATOR(int i) {
			return GetToken(plcsimParser.SEPARATOR, i);
		}
		public SeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_separator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IplcsimVisitor<TResult> typedVisitor = visitor as IplcsimVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeparatorContext separator() {
		SeparatorContext _localctx = new SeparatorContext(Context, State);
		EnterRule(_localctx, 8, RULE_separator);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 89; Match(SEPARATOR);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 92;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinecommentContext : ParserRuleContext {
		public ITerminalNode LINECOMMENT() { return GetToken(plcsimParser.LINECOMMENT, 0); }
		public ITerminalNode Eof() { return GetToken(plcsimParser.Eof, 0); }
		public ITerminalNode[] EOL() { return GetTokens(plcsimParser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(plcsimParser.EOL, i);
		}
		public LinecommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linecomment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IplcsimVisitor<TResult> typedVisitor = visitor as IplcsimVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinecomment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinecommentContext linecomment() {
		LinecommentContext _localctx = new LinecommentContext(Context, State);
		EnterRule(_localctx, 10, RULE_linecomment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(LINECOMMENT);
			State = 101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EOL:
				{
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 95; Match(EOL);
					}
					}
					State = 98;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==EOL );
				}
				break;
			case Eof:
				{
				State = 100; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(plcsimParser.EQUAL, 0); }
		public ITerminalNode AND() { return GetToken(plcsimParser.AND, 0); }
		public ITerminalNode HAT() { return GetToken(plcsimParser.HAT, 0); }
		public ITerminalNode PLUS() { return GetToken(plcsimParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(plcsimParser.MINUS, 0); }
		public ITerminalNode MUL_OR_INDIRECT() { return GetToken(plcsimParser.MUL_OR_INDIRECT, 0); }
		public ITerminalNode SLASH() { return GetToken(plcsimParser.SLASH, 0); }
		public ITerminalNode GT() { return GetToken(plcsimParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(plcsimParser.LT, 0); }
		public ITerminalNode VBAR() { return GetToken(plcsimParser.VBAR, 0); }
		public ITerminalNode TILDA() { return GetToken(plcsimParser.TILDA, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IplcsimVisitor<TResult> typedVisitor = visitor as IplcsimVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 12, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << AND) | (1L << HAT) | (1L << PLUS) | (1L << MINUS) | (1L << MUL_OR_INDIRECT) | (1L << SLASH) | (1L << GT) | (1L << LT) | (1L << VBAR) | (1L << TILDA))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public IndirectContext indirect() {
			return GetRuleContext<IndirectContext>(0);
		}
		public WordbitContext wordbit() {
			return GetRuleContext<WordbitContext>(0);
		}
		public LocalContext local() {
			return GetRuleContext<LocalContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(plcsimParser.IDENTIFIER, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(plcsimParser.COLON, 0); }
		public IndexContext index() {
			return GetRuleContext<IndexContext>(0);
		}
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IplcsimVisitor<TResult> typedVisitor = visitor as IplcsimVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		return operand(0);
	}

	private OperandContext operand(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		OperandContext _localctx = new OperandContext(Context, _parentState);
		OperandContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_operand, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 106; literal();
				}
				break;
			case 2:
				{
				State = 107; indirect();
				}
				break;
			case 3:
				{
				State = 108; wordbit();
				}
				break;
			case 4:
				{
				State = 109; local();
				}
				break;
			case 5:
				{
				State = 110; Match(IDENTIFIER);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 118;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OperandContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_operand);
					State = 113;
					if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
					State = 114; Match(COLON);
					State = 115; index();
					}
					} 
				}
				State = 120;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(plcsimParser.IDENTIFIER, 0); }
		public Const_numberContext const_number() {
			return GetRuleContext<Const_numberContext>(0);
		}
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IplcsimVisitor<TResult> typedVisitor = visitor as IplcsimVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 16, RULE_index);
		try {
			State = 123;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121; Match(IDENTIFIER);
				}
				break;
			case DOTINT:
			case CONST_DEC_NUMBER:
			case CONST_HEX_NUMBER:
			case CONST_FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; const_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WordbitContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(plcsimParser.IDENTIFIER, 0); }
		public ITerminalNode DOTINT() { return GetToken(plcsimParser.DOTINT, 0); }
		public WordbitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wordbit; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IplcsimVisitor<TResult> typedVisitor = visitor as IplcsimVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWordbit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WordbitContext wordbit() {
		WordbitContext _localctx = new WordbitContext(Context, State);
		EnterRule(_localctx, 18, RULE_wordbit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(IDENTIFIER);
			State = 126; Match(DOTINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndirectContext : ParserRuleContext {
		public ITerminalNode MUL_OR_INDIRECT() { return GetToken(plcsimParser.MUL_OR_INDIRECT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(plcsimParser.IDENTIFIER, 0); }
		public LocalContext local() {
			return GetRuleContext<LocalContext>(0);
		}
		public ITerminalNode OLDINDIRECT() { return GetToken(plcsimParser.OLDINDIRECT, 0); }
		public ITerminalNode DOTINT() { return GetToken(plcsimParser.DOTINT, 0); }
		public IndirectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indirect; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IplcsimVisitor<TResult> typedVisitor = visitor as IplcsimVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndirect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndirectContext indirect() {
		IndirectContext _localctx = new IndirectContext(Context, State);
		EnterRule(_localctx, 20, RULE_indirect);
		try {
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 128; Match(MUL_OR_INDIRECT);
				State = 129; Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 130; Match(MUL_OR_INDIRECT);
				State = 131; local();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 132; Match(OLDINDIRECT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 133; Match(OLDINDIRECT);
				State = 134; Match(DOTINT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalContext : ParserRuleContext {
		public ITerminalNode ATMARK() { return GetToken(plcsimParser.ATMARK, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(plcsimParser.IDENTIFIER, 0); }
		public WordbitContext wordbit() {
			return GetRuleContext<WordbitContext>(0);
		}
		public ITerminalNode CONST_DEC_NUMBER() { return GetToken(plcsimParser.CONST_DEC_NUMBER, 0); }
		public LocalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IplcsimVisitor<TResult> typedVisitor = visitor as IplcsimVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalContext local() {
		LocalContext _localctx = new LocalContext(Context, State);
		EnterRule(_localctx, 22, RULE_local);
		try {
			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 137; Match(ATMARK);
				State = 138; Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 139; Match(ATMARK);
				State = 140; wordbit();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 141; Match(ATMARK);
				State = 142; Match(CONST_DEC_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public Const_stringContext const_string() {
			return GetRuleContext<Const_stringContext>(0);
		}
		public Const_numberContext const_number() {
			return GetRuleContext<Const_numberContext>(0);
		}
		public ITerminalNode UNDEFINE() { return GetToken(plcsimParser.UNDEFINE, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IplcsimVisitor<TResult> typedVisitor = visitor as IplcsimVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 24, RULE_literal);
		try {
			State = 148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONST_STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 145; const_string();
				}
				break;
			case DOTINT:
			case CONST_DEC_NUMBER:
			case CONST_HEX_NUMBER:
			case CONST_FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 146; const_number();
				}
				break;
			case UNDEFINE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 147; Match(UNDEFINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Const_numberContext : ParserRuleContext {
		public Const_dec_numberContext const_dec_number() {
			return GetRuleContext<Const_dec_numberContext>(0);
		}
		public Const_hex_numberContext const_hex_number() {
			return GetRuleContext<Const_hex_numberContext>(0);
		}
		public Const_floatContext const_float() {
			return GetRuleContext<Const_floatContext>(0);
		}
		public Const_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IplcsimVisitor<TResult> typedVisitor = visitor as IplcsimVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Const_numberContext const_number() {
		Const_numberContext _localctx = new Const_numberContext(Context, State);
		EnterRule(_localctx, 26, RULE_const_number);
		try {
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CONST_DEC_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150; const_dec_number();
				}
				break;
			case CONST_HEX_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 151; const_hex_number();
				}
				break;
			case DOTINT:
			case CONST_FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 152; const_float();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Const_stringContext : ParserRuleContext {
		public ITerminalNode CONST_STRING() { return GetToken(plcsimParser.CONST_STRING, 0); }
		public Const_stringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IplcsimVisitor<TResult> typedVisitor = visitor as IplcsimVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Const_stringContext const_string() {
		Const_stringContext _localctx = new Const_stringContext(Context, State);
		EnterRule(_localctx, 28, RULE_const_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(CONST_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Const_dec_numberContext : ParserRuleContext {
		public ITerminalNode CONST_DEC_NUMBER() { return GetToken(plcsimParser.CONST_DEC_NUMBER, 0); }
		public Const_dec_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const_dec_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IplcsimVisitor<TResult> typedVisitor = visitor as IplcsimVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst_dec_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Const_dec_numberContext const_dec_number() {
		Const_dec_numberContext _localctx = new Const_dec_numberContext(Context, State);
		EnterRule(_localctx, 30, RULE_const_dec_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(CONST_DEC_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Const_hex_numberContext : ParserRuleContext {
		public ITerminalNode CONST_HEX_NUMBER() { return GetToken(plcsimParser.CONST_HEX_NUMBER, 0); }
		public Const_hex_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const_hex_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IplcsimVisitor<TResult> typedVisitor = visitor as IplcsimVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst_hex_number(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Const_hex_numberContext const_hex_number() {
		Const_hex_numberContext _localctx = new Const_hex_numberContext(Context, State);
		EnterRule(_localctx, 32, RULE_const_hex_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; Match(CONST_HEX_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Const_floatContext : ParserRuleContext {
		public ITerminalNode CONST_FLOAT() { return GetToken(plcsimParser.CONST_FLOAT, 0); }
		public ITerminalNode DOTINT() { return GetToken(plcsimParser.DOTINT, 0); }
		public Const_floatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_const_float; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IplcsimVisitor<TResult> typedVisitor = visitor as IplcsimVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConst_float(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Const_floatContext const_float() {
		Const_floatContext _localctx = new Const_floatContext(Context, State);
		EnterRule(_localctx, 34, RULE_const_float);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			_la = TokenStream.LA(1);
			if ( !(_la==DOTINT || _la==CONST_FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return operand_sempred((OperandContext)_localctx, predIndex);
		}
		return true;
	}
	private bool operand_sempred(OperandContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1B', '\xA6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\a', '\x2', '(', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '+', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '/', 
		'\n', '\x3', '\x3', '\x4', '\a', '\x4', '\x32', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', '\x35', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', ';', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '>', '\v', '\x4', '\a', '\x4', '@', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '\x43', '\v', '\x4', '\x3', '\x4', '\x6', '\x4', '\x46', '\n', 
		'\x4', '\r', '\x4', '\xE', '\x4', 'G', '\x3', '\x4', '\x5', '\x4', 'K', 
		'\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'O', '\n', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x6', '\x5', 'S', '\n', '\x5', '\r', '\x5', 
		'\xE', '\x5', 'T', '\x3', '\x5', '\x5', '\x5', 'X', '\n', '\x5', '\x5', 
		'\x5', 'Z', '\n', '\x5', '\x3', '\x6', '\x6', '\x6', ']', '\n', '\x6', 
		'\r', '\x6', '\xE', '\x6', '^', '\x3', '\a', '\x3', '\a', '\x6', '\a', 
		'\x63', '\n', '\a', '\r', '\a', '\xE', '\a', '\x64', '\x3', '\a', '\x5', 
		'\a', 'h', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'r', 
		'\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'w', '\n', 
		'\t', '\f', '\t', '\xE', '\t', 'z', '\v', '\t', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', '~', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', '\x8A', '\n', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x92', 
		'\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x97', 
		'\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x9C', 
		'\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x2', '\x3', '\x10', '\x14', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', 
		'$', '\x2', '\x4', '\x3', '\x2', '\x3', '\r', '\x4', '\x2', '\x11', '\x11', 
		'\x18', '\x18', '\x2', '\xB0', '\x2', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '.', '\x3', '\x2', '\x2', '\x2', '\x6', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\b', 'Y', '\x3', '\x2', '\x2', '\x2', '\n', '\\', '\x3', '\x2', 
		'\x2', '\x2', '\f', '`', '\x3', '\x2', '\x2', '\x2', '\xE', 'i', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'q', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x14', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x89', '\x3', '\x2', '\x2', '\x2', '\x18', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x96', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x9F', '\x3', '\x2', '\x2', '\x2', '\"', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '$', '\xA3', '\x3', '\x2', '\x2', '\x2', '&', '(', '\x5', 
		'\x4', '\x3', '\x2', '\'', '&', '\x3', '\x2', '\x2', '\x2', '(', '+', 
		'\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', 
		'*', '\x3', '\x2', '\x2', '\x2', '*', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'+', ')', '\x3', '\x2', '\x2', '\x2', ',', '/', '\x5', '\x6', '\x4', '\x2', 
		'-', '/', '\x5', '\f', '\a', '\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', 
		'.', '-', '\x3', '\x2', '\x2', '\x2', '/', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x32', '\x5', '\n', '\x6', '\x2', '\x31', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x35', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x36', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x41', '\x5', '\b', '\x5', '\x2', '\x37', 
		'\x38', '\x5', '\n', '\x6', '\x2', '\x38', '<', '\x5', '\x10', '\t', '\x2', 
		'\x39', ';', '\x5', '\n', '\x6', '\x2', ':', '\x39', '\x3', '\x2', '\x2', 
		'\x2', ';', '>', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', 
		'\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '@', '\x3', '\x2', '\x2', 
		'\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '?', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x43', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'J', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x46', '\a', '\x13', '\x2', '\x2', '\x45', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', 
		'\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', 
		'K', '\x3', '\x2', '\x2', '\x2', 'I', 'K', '\a', '\x2', '\x2', '\x3', 
		'J', '\x45', '\x3', '\x2', '\x2', '\x2', 'J', 'I', '\x3', '\x2', '\x2', 
		'\x2', 'K', '\a', '\x3', '\x2', '\x2', '\x2', 'L', 'N', '\a', '\x1B', 
		'\x2', '\x2', 'M', 'O', '\a', '\x1A', '\x2', '\x2', 'N', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 'Z', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'R', '\a', '\x1B', '\x2', '\x2', 'Q', 'S', '\x5', '\xE', 
		'\b', '\x2', 'R', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'W', '\x3', '\x2', '\x2', '\x2', 'V', 'X', '\a', '\x1A', 
		'\x2', '\x2', 'W', 'V', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Z', '\x3', '\x2', '\x2', '\x2', 'Y', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'P', '\x3', '\x2', '\x2', '\x2', 'Z', '\t', '\x3', 
		'\x2', '\x2', '\x2', '[', ']', '\a', '\x14', '\x2', '\x2', '\\', '[', 
		'\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', 
		'\\', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', 
		'_', '\v', '\x3', '\x2', '\x2', '\x2', '`', 'g', '\a', '\x15', '\x2', 
		'\x2', '\x61', '\x63', '\a', '\x13', '\x2', '\x2', '\x62', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x65', 'h', '\x3', '\x2', '\x2', '\x2', '\x66', 'h', '\a', '\x2', 
		'\x2', '\x3', 'g', '\x62', '\x3', '\x2', '\x2', '\x2', 'g', '\x66', '\x3', 
		'\x2', '\x2', '\x2', 'h', '\r', '\x3', '\x2', '\x2', '\x2', 'i', 'j', 
		'\t', '\x2', '\x2', '\x2', 'j', '\xF', '\x3', '\x2', '\x2', '\x2', 'k', 
		'l', '\b', '\t', '\x1', '\x2', 'l', 'r', '\x5', '\x1A', '\xE', '\x2', 
		'm', 'r', '\x5', '\x16', '\f', '\x2', 'n', 'r', '\x5', '\x14', '\v', '\x2', 
		'o', 'r', '\x5', '\x18', '\r', '\x2', 'p', 'r', '\a', '\x1B', '\x2', '\x2', 
		'q', 'k', '\x3', '\x2', '\x2', '\x2', 'q', 'm', '\x3', '\x2', '\x2', '\x2', 
		'q', 'n', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', '\x2', 
		'q', 'p', '\x3', '\x2', '\x2', '\x2', 'r', 'x', '\x3', '\x2', '\x2', '\x2', 
		's', 't', '\f', '\a', '\x2', '\x2', 't', 'u', '\a', '\xE', '\x2', '\x2', 
		'u', 'w', '\x5', '\x12', '\n', '\x2', 'v', 's', '\x3', '\x2', '\x2', '\x2', 
		'w', 'z', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', '\x11', '\x3', '\x2', '\x2', 
		'\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', '{', '~', '\a', '\x1B', '\x2', 
		'\x2', '|', '~', '\x5', '\x1C', '\xF', '\x2', '}', '{', '\x3', '\x2', 
		'\x2', '\x2', '}', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '\x80', '\a', '\x1B', '\x2', '\x2', '\x80', 
		'\x81', '\a', '\x11', '\x2', '\x2', '\x81', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x83', '\a', '\b', '\x2', '\x2', '\x83', '\x8A', '\a', 
		'\x1B', '\x2', '\x2', '\x84', '\x85', '\a', '\b', '\x2', '\x2', '\x85', 
		'\x8A', '\x5', '\x18', '\r', '\x2', '\x86', '\x8A', '\a', '\x12', '\x2', 
		'\x2', '\x87', '\x88', '\a', '\x12', '\x2', '\x2', '\x88', '\x8A', '\a', 
		'\x11', '\x2', '\x2', '\x89', '\x82', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x89', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x8C', '\a', '\xF', '\x2', '\x2', '\x8C', 
		'\x92', '\a', '\x1B', '\x2', '\x2', '\x8D', '\x8E', '\a', '\xF', '\x2', 
		'\x2', '\x8E', '\x92', '\x5', '\x14', '\v', '\x2', '\x8F', '\x90', '\a', 
		'\xF', '\x2', '\x2', '\x90', '\x92', '\a', '\x16', '\x2', '\x2', '\x91', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x91', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x97', '\x5', '\x1E', '\x10', '\x2', '\x94', 
		'\x97', '\x5', '\x1C', '\xF', '\x2', '\x95', '\x97', '\a', '\x10', '\x2', 
		'\x2', '\x96', '\x93', '\x3', '\x2', '\x2', '\x2', '\x96', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x98', '\x9C', '\x5', ' ', '\x11', 
		'\x2', '\x99', '\x9C', '\x5', '\"', '\x12', '\x2', '\x9A', '\x9C', '\x5', 
		'$', '\x13', '\x2', '\x9B', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', 
		'\x19', '\x2', '\x2', '\x9E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\xA0', '\a', '\x16', '\x2', '\x2', '\xA0', '!', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA2', '\a', '\x17', '\x2', '\x2', '\xA2', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA4', '\t', '\x3', '\x2', '\x2', '\xA4', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x17', ')', '.', '\x33', '<', '\x41', 
		'G', 'J', 'N', 'T', 'W', 'Y', '^', '\x64', 'g', 'q', 'x', '}', '\x89', 
		'\x91', '\x96', '\x9B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
