//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /Users/takuumi/Projects/StudyANTLR/Part3/STtoKVScript/STGrammer.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class STGrammerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		DEFINE=1, COLON=2, EQUAL=3, PLUS=4, MINUS=5, ASTERISK=6, SLASH=7, NEWLINE=8, 
		COMMENTKEY=9, IDENTIFIER=10, SEPARATOR=11;
	public const int
		RULE_input = 0, RULE_oneline = 1, RULE_stlang = 2, RULE_expr = 3, RULE_define = 4, 
		RULE_linecomment = 5;
	public static readonly string[] ruleNames = {
		"input", "oneline", "stlang", "expr", "define", "linecomment"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "':'", "'='", "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "DEFINE", "COLON", "EQUAL", "PLUS", "MINUS", "ASTERISK", "SLASH", 
		"NEWLINE", "COMMENTKEY", "IDENTIFIER", "SEPARATOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "STGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static STGrammerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public STGrammerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public STGrammerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(STGrammerParser.Eof, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(STGrammerParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(STGrammerParser.NEWLINE, i);
		}
		public OnelineContext[] oneline() {
			return GetRuleContexts<OnelineContext>();
		}
		public OnelineContext oneline(int i) {
			return GetRuleContext<OnelineContext>(i);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTGrammerVisitor<TResult> typedVisitor = visitor as ISTGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 13;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMENTKEY || _la==IDENTIFIER) {
						{
						State = 12; oneline();
						}
					}

					State = 15; Match(NEWLINE);
					}
					} 
				}
				State = 20;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 22;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENTKEY || _la==IDENTIFIER) {
				{
				State = 21; oneline();
				}
			}

			State = 24; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnelineContext : ParserRuleContext {
		public OnelineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneline; } }
	 
		public OnelineContext() { }
		public virtual void CopyFrom(OnelineContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expr_stlangContext : OnelineContext {
		public StlangContext stlang() {
			return GetRuleContext<StlangContext>(0);
		}
		public Expr_stlangContext(OnelineContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTGrammerVisitor<TResult> typedVisitor = visitor as ISTGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_stlang(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_stlinecommentContext : OnelineContext {
		public LinecommentContext linecomment() {
			return GetRuleContext<LinecommentContext>(0);
		}
		public Expr_stlinecommentContext(OnelineContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTGrammerVisitor<TResult> typedVisitor = visitor as ISTGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_stlinecomment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnelineContext oneline() {
		OnelineContext _localctx = new OnelineContext(Context, State);
		EnterRule(_localctx, 2, RULE_oneline);
		try {
			State = 28;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				_localctx = new Expr_stlangContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 26; stlang();
				}
				break;
			case COMMENTKEY:
				_localctx = new Expr_stlinecommentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 27; linecomment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StlangContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(STGrammerParser.IDENTIFIER, 0); }
		public ITerminalNode DEFINE() { return GetToken(STGrammerParser.DEFINE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StlangContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stlang; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTGrammerVisitor<TResult> typedVisitor = visitor as ISTGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStlang(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StlangContext stlang() {
		StlangContext _localctx = new StlangContext(Context, State);
		EnterRule(_localctx, 4, RULE_stlang);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; Match(IDENTIFIER);
			State = 31; Match(DEFINE);
			State = 32; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Expr_defineContext : ExprContext {
		public DefineContext define() {
			return GetRuleContext<DefineContext>(0);
		}
		public Expr_defineContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTGrammerVisitor<TResult> typedVisitor = visitor as ISTGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_define(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Expr_additiveContext : ExprContext {
		public ExprContext lhs;
		public ExprContext rhs;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(STGrammerParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(STGrammerParser.MINUS, 0); }
		public Expr_additiveContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTGrammerVisitor<TResult> typedVisitor = visitor as ISTGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr_additive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Expr_defineContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 35; define();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 42;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expr_additiveContext(new ExprContext(_parentctx, _parentState));
					((Expr_additiveContext)_localctx).lhs = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_expr);
					State = 37;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 38;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 39; ((Expr_additiveContext)_localctx).rhs = expr(2);
					}
					} 
				}
				State = 44;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DefineContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(STGrammerParser.IDENTIFIER, 0); }
		public DefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_define; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTGrammerVisitor<TResult> typedVisitor = visitor as ISTGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefineContext define() {
		DefineContext _localctx = new DefineContext(Context, State);
		EnterRule(_localctx, 8, RULE_define);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinecommentContext : ParserRuleContext {
		public ITerminalNode COMMENTKEY() { return GetToken(STGrammerParser.COMMENTKEY, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(STGrammerParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(STGrammerParser.NEWLINE, i);
		}
		public LinecommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linecomment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISTGrammerVisitor<TResult> typedVisitor = visitor as ISTGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinecomment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinecommentContext linecomment() {
		LinecommentContext _localctx = new LinecommentContext(Context, State);
		EnterRule(_localctx, 10, RULE_linecomment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(COMMENTKEY);
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFINE) | (1L << COLON) | (1L << EQUAL) | (1L << PLUS) | (1L << MINUS) | (1L << ASTERISK) | (1L << SLASH) | (1L << COMMENTKEY) | (1L << IDENTIFIER) | (1L << SEPARATOR))) != 0)) {
				{
				{
				State = 48;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==NEWLINE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\r', '\x39', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x5', '\x2', 
		'\x10', '\n', '\x2', '\x3', '\x2', '\a', '\x2', '\x13', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x16', '\v', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'\x19', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x1F', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '+', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '.', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\a', '\a', '\x34', '\n', '\a', '\f', '\a', 
		'\xE', '\a', '\x37', '\v', '\a', '\x3', '\a', '\x2', '\x3', '\b', '\b', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\x2', '\x4', '\x3', '\x2', '\x6', 
		'\a', '\x3', '\x2', '\n', '\n', '\x2', '\x38', '\x2', '\x14', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x6', ' ', '\x3', 
		'\x2', '\x2', '\x2', '\b', '$', '\x3', '\x2', '\x2', '\x2', '\n', '/', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x10', '\x5', '\x4', '\x3', '\x2', '\xF', '\xE', '\x3', '\x2', 
		'\x2', '\x2', '\xF', '\x10', '\x3', '\x2', '\x2', '\x2', '\x10', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x11', '\x13', '\a', '\n', '\x2', '\x2', 
		'\x12', '\xF', '\x3', '\x2', '\x2', '\x2', '\x13', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x12', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '\x18', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x14', '\x3', '\x2', '\x2', '\x2', '\x17', '\x19', '\x5', '\x4', 
		'\x3', '\x2', '\x18', '\x17', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x1B', '\a', '\x2', '\x2', '\x3', '\x1B', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x1F', '\x5', '\x6', '\x4', '\x2', '\x1D', '\x1F', 
		'\x5', '\f', '\a', '\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x5', '\x3', '\x2', 
		'\x2', '\x2', ' ', '!', '\a', '\f', '\x2', '\x2', '!', '\"', '\a', '\x3', 
		'\x2', '\x2', '\"', '#', '\x5', '\b', '\x5', '\x2', '#', '\a', '\x3', 
		'\x2', '\x2', '\x2', '$', '%', '\b', '\x5', '\x1', '\x2', '%', '&', '\x5', 
		'\n', '\x6', '\x2', '&', ',', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\f', 
		'\x3', '\x2', '\x2', '(', ')', '\t', '\x2', '\x2', '\x2', ')', '+', '\x5', 
		'\b', '\x5', '\x4', '*', '\'', '\x3', '\x2', '\x2', '\x2', '+', '.', '\x3', 
		'\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', 
		'\x2', '\x2', '\x2', '-', '\t', '\x3', '\x2', '\x2', '\x2', '.', ',', 
		'\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', '\f', '\x2', '\x2', '\x30', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x31', '\x35', '\a', '\v', '\x2', '\x2', 
		'\x32', '\x34', '\n', '\x3', '\x2', '\x2', '\x33', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x37', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\r', '\x3', '\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\xF', '\x14', '\x18', '\x1E', ',', '\x35',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
